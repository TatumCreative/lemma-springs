{
  "version": 3,
  "sources": [
    "../../../../../usr/local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/add.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/clone.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/copy.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/create.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/cross.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/distance.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/divide.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/dot.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/forEach.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/fromValues.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/index.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/length.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/lerp.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/max.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/min.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/multiply.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/negate.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/normalize.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/random.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/scale.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/scaleAndAdd.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/set.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/squaredDistance.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/squaredLength.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/subtract.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/transformMat2.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/transformMat2d.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/transformMat3.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/node_modules/gl-vec2/transformMat4.js",
    "/Users/gregtatum/Google Drive/lemmas/springs/worker.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports = add\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0]\n    out[1] = a[1] + b[1]\n    return out\n}",
    "module.exports = clone\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nfunction clone(a) {\n    var out = new Float32Array(2)\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}",
    "module.exports = copy\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nfunction copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}",
    "module.exports = create\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nfunction create() {\n    var out = new Float32Array(2)\n    out[0] = 0\n    out[1] = 0\n    return out\n}",
    "module.exports = cross\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0]\n    out[0] = out[1] = 0\n    out[2] = z\n    return out\n}",
    "module.exports = distance\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1]\n    return Math.sqrt(x*x + y*y)\n}",
    "module.exports = divide\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction divide(out, a, b) {\n    out[0] = a[0] / b[0]\n    out[1] = a[1] / b[1]\n    return out\n}",
    "module.exports = dot\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1]\n}",
    "module.exports = forEach\n\nvar vec = require('./create')()\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nfunction forEach(a, stride, offset, count, fn, arg) {\n    var i, l\n    if(!stride) {\n        stride = 2\n    }\n\n    if(!offset) {\n        offset = 0\n    }\n    \n    if(count) {\n        l = Math.min((count * stride) + offset, a.length)\n    } else {\n        l = a.length\n    }\n\n    for(i = offset; i < l; i += stride) {\n        vec[0] = a[i]\n        vec[1] = a[i+1]\n        fn(vec, vec, arg)\n        a[i] = vec[0]\n        a[i+1] = vec[1]\n    }\n    \n    return a\n}",
    "module.exports = fromValues\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nfunction fromValues(x, y) {\n    var out = new Float32Array(2)\n    out[0] = x\n    out[1] = y\n    return out\n}",
    "module.exports = {\n  create: require('./create')\n  , clone: require('./clone')\n  , fromValues: require('./fromValues')\n  , copy: require('./copy')\n  , set: require('./set')\n  , add: require('./add')\n  , subtract: require('./subtract')\n  , multiply: require('./multiply')\n  , divide: require('./divide')\n  , min: require('./min')\n  , max: require('./max')\n  , scale: require('./scale')\n  , scaleAndAdd: require('./scaleAndAdd')\n  , distance: require('./distance')\n  , squaredDistance: require('./squaredDistance')\n  , length: require('./length')\n  , squaredLength: require('./squaredLength')\n  , negate: require('./negate')\n  , normalize: require('./normalize')\n  , dot: require('./dot')\n  , cross: require('./cross')\n  , lerp: require('./lerp')\n  , random: require('./random')\n  , transformMat2: require('./transformMat2')\n  , transformMat2d: require('./transformMat2d')\n  , transformMat3: require('./transformMat3')\n  , transformMat4: require('./transformMat4')\n  , forEach: require('./forEach')\n}",
    "module.exports = length\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1]\n    return Math.sqrt(x*x + y*y)\n}",
    "module.exports = lerp\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nfunction lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1]\n    out[0] = ax + t * (b[0] - ax)\n    out[1] = ay + t * (b[1] - ay)\n    return out\n}",
    "module.exports = max\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction max(out, a, b) {\n    out[0] = Math.max(a[0], b[0])\n    out[1] = Math.max(a[1], b[1])\n    return out\n}",
    "module.exports = min\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction min(out, a, b) {\n    out[0] = Math.min(a[0], b[0])\n    out[1] = Math.min(a[1], b[1])\n    return out\n}",
    "module.exports = multiply\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction multiply(out, a, b) {\n    out[0] = a[0] * b[0]\n    out[1] = a[1] * b[1]\n    return out\n}",
    "module.exports = negate\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nfunction negate(out, a) {\n    out[0] = -a[0]\n    out[1] = -a[1]\n    return out\n}",
    "module.exports = normalize\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1]\n    var len = x*x + y*y\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n    }\n    return out\n}",
    "module.exports = random\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nfunction random(out, scale) {\n    scale = scale || 1.0\n    var r = Math.random() * 2.0 * Math.PI\n    out[0] = Math.cos(r) * scale\n    out[1] = Math.sin(r) * scale\n    return out\n}",
    "module.exports = scale\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b\n    out[1] = a[1] * b\n    return out\n}",
    "module.exports = scaleAndAdd\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale)\n    out[1] = a[1] + (b[1] * scale)\n    return out\n}",
    "module.exports = set\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nfunction set(out, x, y) {\n    out[0] = x\n    out[1] = y\n    return out\n}",
    "module.exports = squaredDistance\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1]\n    return x*x + y*y\n}",
    "module.exports = squaredLength\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n    var x = a[0],\n        y = a[1]\n    return x*x + y*y\n}",
    "module.exports = subtract\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0]\n    out[1] = a[1] - b[1]\n    return out\n}",
    "module.exports = transformMat2\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1]\n    out[0] = m[0] * x + m[2] * y\n    out[1] = m[1] * x + m[3] * y\n    return out\n}",
    "module.exports = transformMat2d\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1]\n    out[0] = m[0] * x + m[2] * y + m[4]\n    out[1] = m[1] * x + m[3] * y + m[5]\n    return out\n}",
    "module.exports = transformMat3\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1]\n    out[0] = m[0] * x + m[3] * y + m[6]\n    out[1] = m[1] * x + m[4] * y + m[7]\n    return out\n}",
    "module.exports = transformMat4\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat4(out, a, m) {\n    var x = a[0], \n        y = a[1]\n    out[0] = m[0] * x + m[4] * y + m[12]\n    out[1] = m[1] * x + m[5] * y + m[13]\n    return out\n}",
    "var Vec2 = require('gl-vec2')\n\nvar current = {\n\tconfig : {},\n\tisInit : false,\n\ttriangles : [],\n\tpoints : [],\n\tvelocities : [],\n\ttransferables : {\n\t\tpoints          : null, // Float32Array\n\t\ttriangleIndices : null, // Uint32Array\n\t\tpointsCount     : 0,\n\t\ttrianglesCount   : 0,\n\t}\n}\n\nfunction _sizeArrays( array, count ) {\n\t\n\tvar difference = count - array.length\n\t\n\tif( difference > 0 ) {\n\t\tfor( var i=0; i < difference; i++ ) {\n\t\t\tarray.push([0,0])\n\t\t}\n\t} else if ( difference < 0 ) {\n\t\tarray.splice( count )\n\t}\n}\n\nfunction _unpackVectors( array, buffer, count ) {\n\t\n\tfor( var i=0; i < count; i++ ) {\n\t\tarray[i][0] = buffer[i*2+0]\n\t\tarray[i][1] = buffer[i*2+1]\n\t}\n}\n\nfunction _unpackIndices( triangles, points, indices, count ) {\n\t\n\tfor( var i=0; i < count; i++ ) {\n\t\ttriangles[i][0] = points[ indices[i*3+0] ]\n\t\ttriangles[i][1] = points[ indices[i*3+1] ]\n\t\ttriangles[i][2] = points[ indices[i*3+2] ]\n\t}\t\n}\n\nfunction _packVectors( array, buffer ) {\n\t\n\tfor( var i=0; i < array.length; i++ ) {\n\t\tbuffer[i*2+0] = array[i][0]\n\t\tbuffer[i*2+1] = array[i][1]\n\t}\n}\n\nfunction _updateData( data ) {\n\t\n\t_sizeArrays( current.points, data.pointsCount )\n\t_sizeArrays( current.velocities, data.pointsCount )\n\t_sizeArrays( current.triangles, data.trianglesCount )\n\t\n\t// TODO - optimize unpacking\n\t\n\t_unpackVectors( current.points,      data.points,     data.pointsCount )\n\t_unpackIndices(\tcurrent.triangles,   current.points,  data.triangleIndices, data.trianglesCount )\n\n}\n\nvar _updateSpring = (function() {\n\t\n\tvar force = []\n\t\n\treturn function _updateSpring( config, pointA, pointB, velocityA, velocityB ) {\n\t\n\t\tvar separation = Vec2.distance( pointA, pointB )\n\n\t\t// Constrain the effect to not allow ridiculous values\n\t\tvar limitSeparation = separation\n\t\t    limitSeparation = Math.min( config.restingLength * config.maxSeparation, limitSeparation )\n\t\t    limitSeparation = Math.max( config.restingLength * config.minSeparation, limitSeparation )\n\n\t\tvar forceMagnitude = (limitSeparation - config.restingLength) * config.springStrength\n\n\t\t// Magnitude => force vector\n\t\tVec2.copy     ( force, pointA )\n\t\tVec2.subtract ( force, force, pointB )\n\t\tVec2.scale    ( force, force, forceMagnitude / separation ) \n\n\t\t// Add/subtract the force to the velocities\n\t\tVec2.subtract ( velocityA, velocityA, force )\n\t\tVec2.add      ( velocityB, velocityB, force )\n\n\t\t// Friction / spring dampening\n\t\tVec2.scale    ( velocityA, velocityA, config.springDamper )\n\t\tVec2.scale    ( velocityB, velocityB, config.springDamper )\n\n\t\t// Apply the velocity\n\t\tVec2.add      ( pointA, pointA, velocityA )\n\t\tVec2.add      ( pointB, pointB, velocityB )\n\t}\n})()\n\nfunction _postResults( transferables ) {\n\t\n\t_packVectors( current.points,      transferables.points )\n\t\n\t// Post message and specify transferable buffers\n\tpostMessage( transferables, [\n\t\ttransferables.points.buffer,\n\t\ttransferables.triangleIndices.buffer,\n\t])\n}\n\nfunction _update() {\n\t\n\tvar count = current.transferables.trianglesCount\n\tvar indices = current.transferables.triangleIndices\n\tvar point = []\n\t\n\tfor( var i=0; i < count; i++ ) {\n\t\t\n\t\tvar offset = i * 3\n\t\t\n\t\tfor( var j=0; j < 3; j++ ) {\n\t\t\t\n\t\t\tvar indexA = indices[ offset + j ]\n\t\t\tvar indexB = indices[ offset + (j+1)%3 ]\n\t\t\t\n\t\t\tvar pointA = current.points[ indexA ]\n\t\t\tvar pointB = current.points[ indexB ]\n\t\t\tvar velocityA = current.velocities[ indexA ]\n\t\t\tvar velocityB = current.velocities[ indexB ]\n\t\t\t\n\t\t\t_updateSpring( current.config, pointA, pointB, velocityA, velocityB )\n\t\t}\n\t}\n}\n\nonmessage = function(e) {\n\t\n\tif( e.data.config ) {\n\t\tcurrent.config = e.data.config\n\t\treturn\n\t}\n\t\n\tif( e.data.needsUpdate ) {\n\t\t_updateData( e.data )\n\t}\n\t\n\t// Explicitely copy over the transferables\n\tcurrent.transferables.points          = e.data.points\n\tcurrent.transferables.triangleIndices = e.data.triangleIndices\n\tcurrent.transferables.pointsCount     = e.data.pointsCount\n\tcurrent.transferables.trianglesCount  = e.data.trianglesCount\n\n\t_update()\n\t\n\t_postResults( current.transferables )\n}"
  ]
}